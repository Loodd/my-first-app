/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface OpenSourceTokenAbiInterface extends utils.Interface {
  functions: {
    "approveFund(string,address)": FunctionFragment;
    "balanceOfFund(address,string)": FunctionFragment;
    "fund(address,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "approveFund" | "balanceOfFund" | "fund"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveFund",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfFund",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "fund",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;

  events: {
    "FundApprove(address,string,address,uint256,uint256)": EventFragment;
    "FundTransfer(address,address,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FundApprove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundTransfer"): EventFragment;
}

export interface FundApproveEventObject {
  owner: string;
  fundingPoolId: string;
  contributor: string;
  fundAmountForOwner: BigNumber;
  fundAmountForContributor: BigNumber;
}
export type FundApproveEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  FundApproveEventObject
>;

export type FundApproveEventFilter = TypedEventFilter<FundApproveEvent>;

export interface FundTransferEventObject {
  baker: string;
  owner: string;
  fundingPoolId: string;
  fundAmount: BigNumber;
}
export type FundTransferEvent = TypedEvent<
  [string, string, string, BigNumber],
  FundTransferEventObject
>;

export type FundTransferEventFilter = TypedEventFilter<FundTransferEvent>;

export interface OpenSourceTokenAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OpenSourceTokenAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveFund(
      fundingPoolId: PromiseOrValue<string>,
      contributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOfFund(
      owner: PromiseOrValue<string>,
      fundingPoolId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fund(
      owner: PromiseOrValue<string>,
      fundingPoolId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approveFund(
    fundingPoolId: PromiseOrValue<string>,
    contributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOfFund(
    owner: PromiseOrValue<string>,
    fundingPoolId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fund(
    owner: PromiseOrValue<string>,
    fundingPoolId: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveFund(
      fundingPoolId: PromiseOrValue<string>,
      contributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOfFund(
      owner: PromiseOrValue<string>,
      fundingPoolId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fund(
      owner: PromiseOrValue<string>,
      fundingPoolId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FundApprove(address,string,address,uint256,uint256)"(
      owner?: null,
      fundingPoolId?: null,
      contributor?: null,
      fundAmountForOwner?: null,
      fundAmountForContributor?: null
    ): FundApproveEventFilter;
    FundApprove(
      owner?: null,
      fundingPoolId?: null,
      contributor?: null,
      fundAmountForOwner?: null,
      fundAmountForContributor?: null
    ): FundApproveEventFilter;

    "FundTransfer(address,address,string,uint256)"(
      baker?: null,
      owner?: null,
      fundingPoolId?: null,
      fundAmount?: null
    ): FundTransferEventFilter;
    FundTransfer(
      baker?: null,
      owner?: null,
      fundingPoolId?: null,
      fundAmount?: null
    ): FundTransferEventFilter;
  };

  estimateGas: {
    approveFund(
      fundingPoolId: PromiseOrValue<string>,
      contributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOfFund(
      owner: PromiseOrValue<string>,
      fundingPoolId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fund(
      owner: PromiseOrValue<string>,
      fundingPoolId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveFund(
      fundingPoolId: PromiseOrValue<string>,
      contributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOfFund(
      owner: PromiseOrValue<string>,
      fundingPoolId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fund(
      owner: PromiseOrValue<string>,
      fundingPoolId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
